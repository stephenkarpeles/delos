//------------------------------------------------------------------------------
// General Utils

@function identity($x) {
  @return $x;
}

@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}


//--------
// in-rems:
// Produces rem w/ px fall back values for properties specified with numeric declarations
// Currently uses $cfg-font-size-body to build rem values.
// e.g. @include remify(font-size, 10) => font-size: 10px; font-size: 0.625rem;
//      @include remify(padding, 10, 24px) => padding: 10px 24px; padding: 0.625rem 1.5rem;
//--------
@function in-rems($values) {
  $max: length($values);
  $remValues: "";

  // Second loop to export rems
  @for $i from 1 through $max {
    $value: strip-units(nth($values, $i));
    $remValues: #{$remValues + $value / strip-units($font-size-base)}rem;

    @if $i < $max {
      $remValues: $remValues + " ";
    }
  }

  @return $remValues;
}

// Convert a pixel value to ems, given an optional base size.
@function em($pxval, $base:$font-size-base) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1em;
}

@function half($val, $round: null) {
  @if (unit($val) == px) {
    // round pixel values by default
    $round: if($round == null, true, $round);
  }
  $float: $val / 2;

  @if $round == true {
    @return round($float);
  } @else if $round == up {
    @return ceil($float);
  } @else if $round == down {
    @return floor($float);
  } @else {
    @return $float;
  }
}

@function clamp($n, $min, $max) {
  @return min($max, max($min, $n));
}

@function strip-units($x) {
  @return ($x / ($x * 0 + 1));
}



//------------------------------------------------------------------------------
// Lists

// Convert a positive or negative index into a positive one
@function posind($list, $i) {
  @return if($i >= 0, $i, length($list) - ($i + 1));
}

// Convert an 'arglist' (which can't be nth'd, etc...) to a normal list
@function unarglist($arglist) {
  @return slice($arglist);
}

// Wrap a value in a list
// TODO: common name. possible conflict?
@function list($val) {
  @return append((), $val);
}

@function prepend($list, $val, $separator:comma) {
  @return join(list($val), $list, $separator:$separator);
}

// Returns the sub-list from $start, up to (but excluding) $end
@function slice($list, $start:1, $end:null) {
  $start: posind($list, $start);
  $end: if($end, posind($list, $end), length($list)+1);

  $result: ();

  @for $i from $start to $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

// Returns all but the last element of $list
@function drop-last($list) {
  @return slice($list, 1, -1);
}

// Maps $f over each value in $list, returning a new list
// TODO: there seems to already be a sass function called 'map'
//       but it's not documented _anywhere_, or exposed in
//       sass's functions.rb
// TODO: should map take a list separator?
@function map($list, $f:"identity", $args...) {
  $result: ();
  @each $val in $list {
    $_args: prepend(unarglist($args), $val);
    $result: append($result, call($f, $_args...), $separator:comma);
  }

  @return $result;
}

@function filter($list, $f:"identity", $args...) {
  $result: ();
  @each $val in $list {
    $_args: prepend(unarglist($args), $val);
    $keep: call($f, $_args...);
    @if $keep {
      $result: append($result, $val, $separator:comma);
    }
  }

  @return $result;
}

@function adjust-nth($list, $n, $f, $args...) {
  // TODO: keyword arugments dont seem to work
  $_args: prepend(unarglist($args), nth($list, $n));
  @return set-nth($list, $n, call($f, $_args...));
}



//------------------------------------------------------------------------------
// Colors

@function blacken($color, $percent) {
  @return mix(#000, $color, $percent);
}

@function whiten($color, $percent) {
  @return mix(#fff, $color, $percent);
}



//------------------------------------------------------------------------------
// HSB

@function hsb($h, $s, $b, $a:1) {
  // TODO: this should have tests to demonstrate correctness
  @if $b == 0 {
    @return rgba(#000, $a);
  } @else {
    // equations from http://codeitdown.com/hsl-hsb-hsv-color/
    $s:$s/100; $b:$b/100;
    $hsl-l: ($b * (2 - $s)) / 2;
    $hsl-s: ($b * $s) / (1 - abs(2 * $hsl-l - 1));
    @return hsla($h, $hsl-s * 100, $hsl-l * 100, $a);
  }
}

@function hsb-components($color) {
  // TODO: this should have tests to demonstrate correctness
  // equations from http://codeitdown.com/hsl-hsb-hsv-color/
  $hsl-l: strip-units(lightness($color)) / 100;
  $hsl-s: strip-units(saturation($color)) / 100;
  $hsb-b: (((2 * $hsl-l) + ($hsl-s * (1 - abs(2 * $hsl-l - 1)))) / 2);
  $hsb-s: (2 * ($hsb-b - $hsl-l)) / $hsb-b;

  @return (h: hue($color),
           s: $hsb-s * 100,
           b: $hsb-b * 100);
}

@function hsb-adjust($color, $h-diff:0, $s-diff:0, $b-diff:0) {
  $hsb: hsb-components($color);
  $h: (map-get($hsb, h) + $h-diff) % 360;
  $s: clamp(map-get($hsb, s) + $s-diff, 0, 100);
  $b: clamp(map-get($hsb, b) + $b-diff, 0, 100);

  @return hsb($h, $s, $b);
}

@function hsb-brighten($color, $amount) {
  @return hsb-adjust($color, $b-diff: $amount);
}

@function hsb-darken($color, $amount) {
  @return hsb-adjust($color, $b-diff: (- $amount));
}
